<<<<<<< Updated upstream
<<<<<<< Updated upstream
transP_last[1:m,m]=1-rowSums(as.matrix(transP_last[,-m],nrow=m))
gaus_sd_last=gaus_sd_true+sample(noise_seq,size=m)
gaus_mean_last=gaus_mean_true+sample(noise_seq,size=m)
list_mstep_para_gaus=EM_gaus(T,m,x,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
if(!is.null(list_mstep_para_gaus)){
gaus_out[iRep,"aic"]=list_mstep_para_gaus$aic
gaus_out[iRep,"bic"]=list_mstep_para_gaus$bic
gaus_out[iRep,"llk"]=list_mstep_para_gaus$loglikelihood
gaus_out[iRep,4:(3+m)]=list_mstep_para_gaus$gaus_mean
gaus_out[iRep,(4+m):(3+2*m)]=list_mstep_para_gaus$gaus_var
gaus_out[iRep,(4+2*m):(3+3*m)]=list_mstep_para_gaus$initP
gaus_out[iRep,(4+3*m):(3+3*m+m^2)]=as.vector(list_mstep_para_gaus$transP)
decoding[iRep,1:T]=viterbi_gaus(list_mstep_para_gaus$initP,
list_mstep_para_gaus$transP,
list_mstep_para_gaus$gaus_mean,
list_mstep_para_gaus$gaus_var,
m,T,x)
decoding[iRep,(T+1)]=sum(decoding[iRep,1:T]==data$C)/T
}
print(iRep)
}
if(length(which(is.na(gaus_out[,1])))>0){
gaus_out=gaus_out[-which(is.na(gaus_out[,1])),]
}
if(length(which(is.na(decoding[,(T+1)])))>0){
decoding=decoding[-which(is.na(decoding[,(T+1)])),]
}
#Step 2.3 Examine MSE of estimators
gaus_MSE=array(dim=c(4,m*3+m^2),dimnames=list(c("truth","bias","variance","MSE"),
c(paste0("mean",1:m),
paste0("var",1:m),paste0("init",1:m),
transP_name)))
gaus_MSE[1,]=gaus_para_true
gaus_MSE[2,]=apply(gaus_out[,-(1:3)],MARGIN=2,FUN=mean)-gaus_para_true
gaus_MSE[3,]=apply(gaus_out[,-(1:3)],MARGIN=2,FUN=var)*(T-1)/T
gaus_MSE[4,]=(gaus_MSE[2,])^2+gaus_MSE[3,]
file_name=paste0("output/gaus_MSE_m",m,".csv")
write.csv(gaus_MSE,file_name)
#Step 3 Simulation for Poisson--------------------------------------------------
#Step 3.1 Set up
m=3
T=60
nRep=10^3
#ture parameters
#Note that we require the mean of different states with increasing order
if(m==2){
initP_true=c(0.2,0.8) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.8,0.2,0.25,0.75),nrow=m,byrow=TRUE)
lambda_true=c(1,3)
} else if(m==3){
initP_true=c(0.1,0.3,0.6) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.7,
0.25,0.5,0.25,
0.4,0.15,0.45),nrow=m,byrow=TRUE)
lambda_true=c(1,3,5)
} else if(m==4){
initP_true=c(0.1,0.3,0.2,0.4) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.25,0.45,
0.15,0.4,0.15,0.3,
0.22,0.32,0.2,0.26,
0.08,0.42,0.3,0.2),
nrow=m,byrow=TRUE)
lambda_true=c(1,3,5,7)
}
pois_para_true=c(lambda_true,initP_true,
as.vector(transP_true))
#initial parameters
noise_seq=seq(0.001,0.01,length=100)
set.seed(4011)
transP_name=c()
for(i in 1:m){
transP_name=c(transP_name,paste0("transP",1:m,i))
}
pois_out=array(NA,dim=c(nRep,3+m*2+m^2),
dimnames=list(paste0("iRep=",1:nRep),
c("aic","bic","llk",
paste0("lambda",1:m),paste0("init",1:m),
transP_name)))
decoding=array(NA,dim=c(nRep,T+1),
dimnames=list(paste0("iRep=",1:nRep),
c(paste0("t=",1:T),"accuracy")))
#Step 3.2 Conduct simulation through replications
for(iRep in 1:nRep){
set.seed(iRep)
data=DGP_pois(T,transP_true,initP_true,lambda_true)
x=data$X
initP_last=initP_true[1:(m-1)]+sample(noise_seq,size=(m-1))
initP_last=c(initP_last,1-sum(initP_last))
transP_last=transP_true+matrix(sample(noise_seq,size=m^2),
nrow=m,ncol=m)
transP_last[1:m,m]=1-rowSums(as.matrix(transP_last[,-m],nrow=m))
lambda_last=lambda_true+sample(noise_seq,size=m)
list_mstep_para_pois=EM_pois(T,m,x,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
if(!is.null(list_mstep_para_pois)){
pois_out[iRep,"aic"]=list_mstep_para_pois$aic
pois_out[iRep,"bic"]=list_mstep_para_pois$bic
pois_out[iRep,"llk"]=list_mstep_para_pois$loglikelihood
pois_out[iRep,4:(3+m)]=list_mstep_para_pois$lambda
pois_out[iRep,(4+m):(3+2*m)]=list_mstep_para_pois$initP
pois_out[iRep,(4+2*m):(3+2*m+m^2)]=as.vector(list_mstep_para_pois$transP)
decoding[iRep,1:T]=viterbi_pois(list_mstep_para_pois$initP,
list_mstep_para_pois$transP,
list_mstep_para_pois$lambda,
m,T,x)
decoding[iRep,(T+1)]=sum(decoding[iRep,1:T]==data$C)/T
}
print(iRep)
}
if(length(which(is.na(pois_out[,1])))>0){
pois_out=pois_out[-which(is.na(pois_out[,1])),]
}
if(length(which(is.na(decoding[,(T+1)])))>0){
decoding=decoding[-which(is.na(decoding[,(T+1)])),]
}
#Step 3.3 Examine MSE of estimators
pois_MSE=array(dim=c(4,m*2+m^2),dimnames=list(c("truth","bias","variance","MSE"),
c(paste0("lambda",1:m),
paste0("init",1:m),
transP_name)))
pois_MSE[1,]=pois_para_true
pois_MSE[2,]=apply(pois_out[,-(1:3)],MARGIN=2,FUN=mean)-pois_para_true
pois_MSE[3,]=(apply(pois_out[,-(1:3)],MARGIN=2,FUN=var))*(T-1)/T
pois_MSE[4,]=(pois_MSE[2,])^2+pois_MSE[3,]
file_name=paste0("output/pois_MSE_m",m,".csv")
write.csv(pois_MSE,file_name)
=======
num_ite=10^4,tol=10^(-3))
list_mstep_para_gaus
gaus_mean_last=rep(10,m)
gaus_sd_last=rep(10,m)
list_mstep_para_gaus=EM_gaus(T=length(x2),m,x2,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
=======
num_ite=10^4,tol=10^(-3))
list_mstep_para_gaus
gaus_mean_last=rep(10,m)
gaus_sd_last=rep(10,m)
list_mstep_para_gaus=EM_gaus(T=length(x2),m,x2,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
>>>>>>> Stashed changes
list_mstep_para_gaus
gaus_mean_last=rep(10,m)
gaus_sd_last=rep(10,m)
list_mstep_para_gaus=EM_gaus(T=length(x2),m,x2,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
list_mstep_para_gaus
#sales
data2<-read.csv("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2/data/sales_rawdata.csv")
#Step 2: Model Selection--------------------------------------------------------
setwd("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2")
source("code/DGP.r")
source('code/EM_gaus.r')
source('code/EM_pois.R')
source("code/viterbi_gaus.R")
source("code/viterbi_pois.R")
#sales
x2=c(data2$ProductP4)
gaus_mean_x2=mean(x2)
gaus_sd_last_x2=sqrt(var(x2))
len_table=length(2:4)+1
aic_bic_x2=array(NA,dim = c(2,len_table),dimnames = list(c('aic','bic'),c(paste0('m=',2:4),"selected m")))
for (m in 2:4){
#m=3
initP_last=rep(1/m,m)
transP_last=matrix(1/m,m,m)
gaus_mean_last=rep(gaus_mean_x2,m)
gaus_sd_last=rep(gaus_sd_last_x2,m)
list_mstep_para_gaus=EM_gaus(T=length(x2),m,x2,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
aic_x2_m=list_mstep_para_gaus$aic
bic_x2_m=list_mstep_para_gaus$bic
aic_bic_x2[1,m-1]=aic_x2_m
aic_bic_x2[2,m-1]=bic_x2_m
}
aic_bic_x2[1,len_table]=as.numeric(which.min(aic_bic_x2[1,])+1)
aic_bic_x2[2,len_table]=as.numeric(which.min(aic_bic_x2[2,])+1)
print(aic_bic_x2)
m=as.numeric(aic_bic_x2[1,len_table])
initP_last=rep(1/m,m)
transP_last=matrix(1/m,m,m)
gaus_mean_last=rep(10,m)
gaus_sd_last=rep(10,m)
list_mstep_para_gaus_est=EM_gaus(T=length(x2),m,x2,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
list_mstep_para_gaus_est
gaus_mean_est_x2=list_mstep_para_gaus_est$gaus_mean
gaus_var_est_x2=list_mstep_para_gaus_est$gaus_var
transP_est_x2=list_mstep_para_gaus_est$transP
initP_est_x2=list_mstep_para_gaus_est$initP
# viterbi & plot
path=viterbi_gaus(initP_est_x2,transP_est_x2,gaus_mean,gaus_var_est_x2,m,T=length(x2),x2)
# viterbi & plot
path=viterbi_gaus(initP_est_x2,transP_est_x2,gaus_mean_est_x2,gaus_var_est_x2,m,T=length(x2),x2)
path
gaus_mean=gaus_mean[order(gaus_mean)]
path[path==1]=gaus_mean[1]
gaus_mean=gaus_mean_est_x2[order(gaus_mean_est_x2)]
path[path==1]=gaus_mean[1]
path[path==2]=gaus_mean[2]
#path[path==3]=gaus_mean[3]
#path[path==4]=gaus_mean[4]
path
plot(x,type = "l")
plot(x2,type = "l")
par(new=TRUE)
plot(path,type = "l",col="red")
#m=as.numeric(aic_bic_x2[1,len_table])
m=3
initP_last=rep(1/m,m)
transP_last=matrix(1/m,m,m)
gaus_mean_last=rep(10,m)
gaus_sd_last=rep(10,m)
list_mstep_para_gaus_est=EM_gaus(T=length(x2),m,x2,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
gaus_mean_est_x2=list_mstep_para_gaus_est$gaus_mean
gaus_var_est_x2=list_mstep_para_gaus_est$gaus_var
transP_est_x2=list_mstep_para_gaus_est$transP
initP_est_x2=list_mstep_para_gaus_est$initP
# viterbi & plot
path=viterbi_gaus(initP_est_x2,transP_est_x2,gaus_mean_est_x2,gaus_var_est_x2,m,T=length(x2),x2)
path
list_mstep_para_gaus_est
#m=as.numeric(aic_bic_x2[1,len_table])
m=4
initP_last=rep(1/m,m)
transP_last=matrix(1/m,m,m)
gaus_mean_last=rep(10,m)
gaus_sd_last=rep(10,m)
list_mstep_para_gaus_est=EM_gaus(T=length(x2),m,x2,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
gaus_mean_est_x2=list_mstep_para_gaus_est$gaus_mean
gaus_var_est_x2=list_mstep_para_gaus_est$gaus_var
transP_est_x2=list_mstep_para_gaus_est$transP
initP_est_x2=list_mstep_para_gaus_est$initP
# viterbi & plot
path=viterbi_gaus(initP_est_x2,transP_est_x2,gaus_mean_est_x2,gaus_var_est_x2,m,T=length(x2),x2)
path
list_mstep_para_gaus_est
#Step 2: Simulation for Gaussian------------------------------------------------
#Step 2.1: Set up
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
m=4
T=60
nRep=10^3
#ture parameters
#Note that we require the mean of different states with increasing order
if(m==2){
initP_true=c(0.2,0.8) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.8,0.2,0.25,0.75),nrow=m,byrow=TRUE)
gaus_sd_true=sqrt(c(1,4))
gaus_mean_true=c(0,4)
} else if(m==3){
initP_true=c(0.1,0.3,0.6) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.7,
0.25,0.5,0.25,
0.4,0.15,0.45),nrow=m,byrow=TRUE)
gaus_sd_true=sqrt(c(1,4,2))
gaus_mean_true=c(0,2,4)
} else if(m==4){
initP_true=c(0.1,0.3,0.2,0.4) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.25,0.45,
0.15,0.4,0.15,0.3,
0.22,0.32,0.2,0.26,
0.08,0.42,0.3,0.2),
nrow=m,byrow=TRUE)
gaus_sd_true=sqrt(c(1,4,2,3))
gaus_mean_true=c(0,2,3,4)
}
gaus_para_true=c(gaus_mean_true,gaus_sd_true^2,initP_true,
as.vector(transP_true))
#initial parameters
noise_seq=seq(0.001,0.01,length=100)
set.seed(4011)
transP_name=c()
for(i in 1:m){
transP_name=c(transP_name,paste0("transP",1:m,i))
<<<<<<< Updated upstream
<<<<<<< Updated upstream
}
gaus_out=array(NA,dim=c(nRep,3+m*3+m^2),
dimnames=list(paste0("iRep=",1:nRep),
c("aic","bic","llk",
paste0("mean",1:m),
paste0("var",1:m),paste0("init",1:m),
transP_name)))
decoding=array(NA,dim=c(nRep,T+1),
dimnames=list(paste0("iRep=",1:nRep),
c(paste0("t=",1:T),"accuracy")))
#Step 2.2 Conduct simulation through replications
for(iRep in 1:nRep){
set.seed(iRep)
data=DGP_gaus(T,transP_true,initP_true,gaus_mean_true,gaus_sd_true)
x=data$X
initP_last=initP_true[1:(m-1)]+sample(noise_seq,size=(m-1))
initP_last=c(initP_last,1-sum(initP_last))
transP_last=transP_true+matrix(sample(noise_seq,size=m^2),
nrow=m,ncol=m)
transP_last[1:m,m]=1-rowSums(as.matrix(transP_last[,-m],nrow=m))
gaus_sd_last=gaus_sd_true+sample(noise_seq,size=m)
gaus_mean_last=gaus_mean_true+sample(noise_seq,size=m)
list_mstep_para_gaus=EM_gaus(T,m,x,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
if(!is.null(list_mstep_para_gaus)){
gaus_out[iRep,"aic"]=list_mstep_para_gaus$aic
gaus_out[iRep,"bic"]=list_mstep_para_gaus$bic
gaus_out[iRep,"llk"]=list_mstep_para_gaus$loglikelihood
gaus_out[iRep,4:(3+m)]=list_mstep_para_gaus$gaus_mean
gaus_out[iRep,(4+m):(3+2*m)]=list_mstep_para_gaus$gaus_var
gaus_out[iRep,(4+2*m):(3+3*m)]=list_mstep_para_gaus$initP
gaus_out[iRep,(4+3*m):(3+3*m+m^2)]=as.vector(list_mstep_para_gaus$transP)
decoding[iRep,1:T]=viterbi_gaus(list_mstep_para_gaus$initP,
list_mstep_para_gaus$transP,
list_mstep_para_gaus$gaus_mean,
list_mstep_para_gaus$gaus_var,
m,T,x)
decoding[iRep,(T+1)]=sum(decoding[iRep,1:T]==data$C)/T
}
print(iRep)
}
if(length(which(is.na(gaus_out[,1])))>0){
gaus_out=gaus_out[-which(is.na(gaus_out[,1])),]
}
if(length(which(is.na(decoding[,(T+1)])))>0){
decoding=decoding[-which(is.na(decoding[,(T+1)])),]
}
#Step 2.3 Examine MSE of estimators
gaus_MSE=array(dim=c(4,m*3+m^2),dimnames=list(c("truth","bias","variance","MSE"),
c(paste0("mean",1:m),
paste0("var",1:m),paste0("init",1:m),
transP_name)))
gaus_MSE[1,]=gaus_para_true
gaus_MSE[2,]=apply(gaus_out[,-(1:3)],MARGIN=2,FUN=mean)-gaus_para_true
gaus_MSE[3,]=apply(gaus_out[,-(1:3)],MARGIN=2,FUN=var)*(T-1)/T
gaus_MSE[4,]=(gaus_MSE[2,])^2+gaus_MSE[3,]
file_name=paste0("output/gaus_MSE_m",m,".csv")
write.csv(gaus_MSE,file_name)
#Step 3 Simulation for Poisson--------------------------------------------------
#Step 3.1 Set up
m=4
T=60
nRep=10^3
#ture parameters
#Note that we require the mean of different states with increasing order
if(m==2){
initP_true=c(0.2,0.8) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.8,0.2,0.25,0.75),nrow=m,byrow=TRUE)
lambda_true=c(1,3)
} else if(m==3){
initP_true=c(0.1,0.3,0.6) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.7,
0.25,0.5,0.25,
0.4,0.15,0.45),nrow=m,byrow=TRUE)
lambda_true=c(1,3,5)
} else if(m==4){
initP_true=c(0.1,0.3,0.2,0.4) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.25,0.45,
0.15,0.4,0.15,0.3,
0.22,0.32,0.2,0.26,
0.08,0.42,0.3,0.2),
nrow=m,byrow=TRUE)
lambda_true=c(1,3,5,7)
}
pois_para_true=c(lambda_true,initP_true,
as.vector(transP_true))
#initial parameters
noise_seq=seq(0.001,0.01,length=100)
set.seed(4011)
transP_name=c()
for(i in 1:m){
transP_name=c(transP_name,paste0("transP",1:m,i))
}
pois_out=array(NA,dim=c(nRep,3+m*2+m^2),
dimnames=list(paste0("iRep=",1:nRep),
c("aic","bic","llk",
paste0("lambda",1:m),paste0("init",1:m),
transP_name)))
decoding=array(NA,dim=c(nRep,T+1),
dimnames=list(paste0("iRep=",1:nRep),
c(paste0("t=",1:T),"accuracy")))
#Step 3.2 Conduct simulation through replications
for(iRep in 1:nRep){
set.seed(iRep)
data=DGP_pois(T,transP_true,initP_true,lambda_true)
x=data$X
initP_last=initP_true[1:(m-1)]+sample(noise_seq,size=(m-1))
initP_last=c(initP_last,1-sum(initP_last))
transP_last=transP_true+matrix(sample(noise_seq,size=m^2),
nrow=m,ncol=m)
transP_last[1:m,m]=1-rowSums(as.matrix(transP_last[,-m],nrow=m))
lambda_last=lambda_true+sample(noise_seq,size=m)
list_mstep_para_pois=EM_pois(T,m,x,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
if(!is.null(list_mstep_para_pois)){
pois_out[iRep,"aic"]=list_mstep_para_pois$aic
pois_out[iRep,"bic"]=list_mstep_para_pois$bic
pois_out[iRep,"llk"]=list_mstep_para_pois$loglikelihood
pois_out[iRep,4:(3+m)]=list_mstep_para_pois$lambda
pois_out[iRep,(4+m):(3+2*m)]=list_mstep_para_pois$initP
pois_out[iRep,(4+2*m):(3+2*m+m^2)]=as.vector(list_mstep_para_pois$transP)
decoding[iRep,1:T]=viterbi_pois(list_mstep_para_pois$initP,
list_mstep_para_pois$transP,
list_mstep_para_pois$lambda,
m,T,x)
decoding[iRep,(T+1)]=sum(decoding[iRep,1:T]==data$C)/T
}
print(iRep)
}
if(length(which(is.na(pois_out[,1])))>0){
pois_out=pois_out[-which(is.na(pois_out[,1])),]
}
if(length(which(is.na(decoding[,(T+1)])))>0){
decoding=decoding[-which(is.na(decoding[,(T+1)])),]
}
#Step 3.3 Examine MSE of estimators
pois_MSE=array(dim=c(4,m*2+m^2),dimnames=list(c("truth","bias","variance","MSE"),
c(paste0("lambda",1:m),
paste0("init",1:m),
transP_name)))
pois_MSE[1,]=pois_para_true
pois_MSE[2,]=apply(pois_out[,-(1:3)],MARGIN=2,FUN=mean)-pois_para_true
pois_MSE[3,]=(apply(pois_out[,-(1:3)],MARGIN=2,FUN=var))*(T-1)/T
pois_MSE[4,]=(pois_MSE[2,])^2+pois_MSE[3,]
file_name=paste0("output/pois_MSE_m",m,".csv")
write.csv(pois_MSE,file_name)
rm(list=ls())
#Step 1: Install packages and load functions------------------------------------
PackageList =c('abind')
NewPackages=PackageList[!(PackageList %in%
installed.packages()[,"Package"])]
if(length(NewPackages)) install.packages(NewPackages)
lapply(PackageList,require,character.only=TRUE)
setwd("/Users/alysonmak/Desktop/github desktop/STAT4011-Project-2")
# setwd("C:/Users/Lenovo/Desktop/git/STAT4011-Project-2")
# setwd("/Users/jiangyunhui/Downloads/STAT4011proj2")
source("code/DGP.r")
source('code/EM_gaus.r')
source('code/EM_pois.R')
source("code/viterbi_gaus.R")
source("code/viterbi_pois.R")
#Step 2: Simulation for Gaussian------------------------------------------------
#Step 2.1: Set up
m=2
T=60
nRep=10^3
#ture parameters
#Note that we require the mean of different states with increasing order
if(m==2){
initP_true=c(0.2,0.8) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.8,0.2,0.25,0.75),nrow=m,byrow=TRUE)
gaus_sd_true=sqrt(c(1,4))
gaus_mean_true=c(0,4)
} else if(m==3){
initP_true=c(0.1,0.3,0.6) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.7,
0.25,0.5,0.25,
0.4,0.15,0.45),nrow=m,byrow=TRUE)
gaus_sd_true=sqrt(c(1,4,2))
gaus_mean_true=c(0,2,4)
} else if(m==4){
initP_true=c(0.1,0.3,0.2,0.4) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.25,0.45,
0.15,0.4,0.15,0.3,
0.22,0.32,0.2,0.26,
0.08,0.42,0.3,0.2),
nrow=m,byrow=TRUE)
gaus_sd_true=sqrt(c(1,4,2,3))
gaus_mean_true=c(0,2,3,4)
}
gaus_para_true=c(gaus_mean_true,gaus_sd_true^2,initP_true,
as.vector(transP_true))
#initial parameters
noise_seq=seq(0.001,0.01,length=100)
set.seed(4011)
transP_name=c()
for(i in 1:m){
transP_name=c(transP_name,paste0("transP",1:m,i))
}
gaus_out=array(NA,dim=c(nRep,3+m*3+m^2),
dimnames=list(paste0("iRep=",1:nRep),
c("aic","bic","llk",
=======
}
gaus_out=array(NA,dim=c(nRep,3+m*3+m^2),
dimnames=list(paste0("iRep=",1:nRep),
c("aic","bic","llk",
>>>>>>> Stashed changes
paste0("mean",1:m),
paste0("var",1:m),paste0("init",1:m),
transP_name)))
decoding=array(NA,dim=c(nRep,T+1),
dimnames=list(paste0("iRep=",1:nRep),
=======
}
gaus_out=array(NA,dim=c(nRep,3+m*3+m^2),
dimnames=list(paste0("iRep=",1:nRep),
c("aic","bic","llk",
paste0("mean",1:m),
paste0("var",1:m),paste0("init",1:m),
transP_name)))
decoding=array(NA,dim=c(nRep,T+1),
dimnames=list(paste0("iRep=",1:nRep),
>>>>>>> Stashed changes
c(paste0("t=",1:T),"accuracy")))
#Step 2.2 Conduct simulation through replications
for(iRep in 1:nRep){
set.seed(iRep)
data=DGP_gaus(T,transP_true,initP_true,gaus_mean_true,gaus_sd_true)
x=data$X
initP_last=initP_true[1:(m-1)]+sample(noise_seq,size=(m-1))
initP_last=c(initP_last,1-sum(initP_last))
transP_last=transP_true+matrix(sample(noise_seq,size=m^2),
nrow=m,ncol=m)
transP_last[1:m,m]=1-rowSums(as.matrix(transP_last[,-m],nrow=m))
gaus_sd_last=gaus_sd_true+sample(noise_seq,size=m)
gaus_mean_last=gaus_mean_true+sample(noise_seq,size=m)
list_mstep_para_gaus=EM_gaus(T,m,x,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
if(!is.null(list_mstep_para_gaus)){
gaus_out[iRep,"aic"]=list_mstep_para_gaus$aic
gaus_out[iRep,"bic"]=list_mstep_para_gaus$bic
gaus_out[iRep,"llk"]=list_mstep_para_gaus$loglikelihood
gaus_out[iRep,4:(3+m)]=list_mstep_para_gaus$gaus_mean
gaus_out[iRep,(4+m):(3+2*m)]=list_mstep_para_gaus$gaus_var
gaus_out[iRep,(4+2*m):(3+3*m)]=list_mstep_para_gaus$initP
gaus_out[iRep,(4+3*m):(3+3*m+m^2)]=as.vector(list_mstep_para_gaus$transP)
decoding[iRep,1:T]=viterbi_gaus(list_mstep_para_gaus$initP,
list_mstep_para_gaus$transP,
list_mstep_para_gaus$gaus_mean,
list_mstep_para_gaus$gaus_var,
m,T,x)
decoding[iRep,(T+1)]=sum(decoding[iRep,1:T]==data$C)/T
}
print(iRep)
}
<<<<<<< Updated upstream
<<<<<<< Updated upstream
if(length(which(is.na(gaus_out[,1])))>0){
gaus_out=gaus_out[-which(is.na(gaus_out[,1])),]
}
if(length(which(is.na(decoding[,(T+1)])))>0){
decoding=decoding[-which(is.na(decoding[,(T+1)])),]
}
#Step 2.3 Examine MSE of estimators
gaus_MSE=array(dim=c(4,m*3+m^2),dimnames=list(c("truth","bias","variance","MSE"),
c(paste0("mean",1:m),
paste0("var",1:m),paste0("init",1:m),
transP_name)))
gaus_MSE[1,]=gaus_para_true
gaus_MSE[2,]=apply(gaus_out[,-(1:3)],MARGIN=2,FUN=mean)-gaus_para_true
gaus_MSE[3,]=apply(gaus_out[,-(1:3)],MARGIN=2,FUN=var)*(T-1)/T
gaus_MSE[4,]=(gaus_MSE[2,])^2+gaus_MSE[3,]
file_name=paste0("output/gaus_MSE_m",m,".csv")
write.csv(gaus_MSE,file_name)
#Step 3 Simulation for Poisson--------------------------------------------------
#Step 3.1 Set up
m=2
T=60
nRep=10^3
#ture parameters
#Note that we require the mean of different states with increasing order
if(m==2){
initP_true=c(0.2,0.8) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.8,0.2,0.25,0.75),nrow=m,byrow=TRUE)
lambda_true=c(1,3)
} else if(m==3){
initP_true=c(0.1,0.3,0.6) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.7,
0.25,0.5,0.25,
0.4,0.15,0.45),nrow=m,byrow=TRUE)
lambda_true=c(1,3,5)
} else if(m==4){
initP_true=c(0.1,0.3,0.2,0.4) #initial distribution of Hidden Markov States
transP_true=matrix(c(0.1,0.2,0.25,0.45,
0.15,0.4,0.15,0.3,
0.22,0.32,0.2,0.26,
0.08,0.42,0.3,0.2),
nrow=m,byrow=TRUE)
lambda_true=c(1,3,5,7)
}
pois_para_true=c(lambda_true,initP_true,
as.vector(transP_true))
#initial parameters
noise_seq=seq(0.001,0.01,length=100)
set.seed(4011)
transP_name=c()
for(i in 1:m){
transP_name=c(transP_name,paste0("transP",1:m,i))
}
pois_out=array(NA,dim=c(nRep,3+m*2+m^2),
dimnames=list(paste0("iRep=",1:nRep),
c("aic","bic","llk",
paste0("lambda",1:m),paste0("init",1:m),
transP_name)))
decoding=array(NA,dim=c(nRep,T+1),
dimnames=list(paste0("iRep=",1:nRep),
c(paste0("t=",1:T),"accuracy")))
#Step 3.2 Conduct simulation through replications
for(iRep in 1:nRep){
set.seed(iRep)
data=DGP_pois(T,transP_true,initP_true,lambda_true)
x=data$X
initP_last=initP_true[1:(m-1)]+sample(noise_seq,size=(m-1))
initP_last=c(initP_last,1-sum(initP_last))
transP_last=transP_true+matrix(sample(noise_seq,size=m^2),
nrow=m,ncol=m)
transP_last[1:m,m]=1-rowSums(as.matrix(transP_last[,-m],nrow=m))
lambda_last=lambda_true+sample(noise_seq,size=m)
list_mstep_para_pois=EM_pois(T,m,x,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
if(!is.null(list_mstep_para_pois)){
pois_out[iRep,"aic"]=list_mstep_para_pois$aic
pois_out[iRep,"bic"]=list_mstep_para_pois$bic
pois_out[iRep,"llk"]=list_mstep_para_pois$loglikelihood
pois_out[iRep,4:(3+m)]=list_mstep_para_pois$lambda
pois_out[iRep,(4+m):(3+2*m)]=list_mstep_para_pois$initP
pois_out[iRep,(4+2*m):(3+2*m+m^2)]=as.vector(list_mstep_para_pois$transP)
decoding[iRep,1:T]=viterbi_pois(list_mstep_para_pois$initP,
list_mstep_para_pois$transP,
list_mstep_para_pois$lambda,
m,T,x)
decoding[iRep,(T+1)]=sum(decoding[iRep,1:T]==data$C)/T
}
print(iRep)
}
if(length(which(is.na(pois_out[,1])))>0){
pois_out=pois_out[-which(is.na(pois_out[,1])),]
}
if(length(which(is.na(decoding[,(T+1)])))>0){
decoding=decoding[-which(is.na(decoding[,(T+1)])),]
}
#Step 3.3 Examine MSE of estimators
pois_MSE=array(dim=c(4,m*2+m^2),dimnames=list(c("truth","bias","variance","MSE"),
c(paste0("lambda",1:m),
paste0("init",1:m),
transP_name)))
pois_MSE[1,]=pois_para_true
pois_MSE[2,]=apply(pois_out[,-(1:3)],MARGIN=2,FUN=mean)-pois_para_true
pois_MSE[3,]=(apply(pois_out[,-(1:3)],MARGIN=2,FUN=var))*(T-1)/T
pois_MSE[4,]=(pois_MSE[2,])^2+pois_MSE[3,]
file_name=paste0("output/pois_MSE_m",m,".csv")
write.csv(pois_MSE,file_name)
=======
=======
>>>>>>> Stashed changes
#==============================================================
#gaus
T=400
transP_true=matrix(c(0.9,0.02,0.05,0.03,
0.1,0.75,0.06,0.09,
0.05,0.1,0.55,0.3,
0.1,0.1,0.65,0.15),4,4,byrow = TRUE)
initP_true=c(0.2,0.4,0.1,0.3)
m=length(initP_true)
gaus_mean_true=c(3,8,15,20)
gaus_sd_true=c(5,10,15,20)
data=DGP_gaus(T,transP_true,initP_true,gaus_mean_true,gaus_sd_true)
x=data$X
# m=4
initP_last=c(0.5,0.2,0.2,0.1)
transP_last=matrix(rep(0.25,16),4,4,byrow = TRUE)
gaus_mean_last=c(20,15,20,15)
gaus_sd_last=rep(5,4)
list_mstep_para_gaus=EM_gaus(T,m,x,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^3,tol=10^(-5))
#Step 1: data pre-processing----------------------------------------------------
#visitors
data1<-read.csv("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2/data/visitors_rawdata.csv")
data1
#pois==============================
x1=c(data1$Unique.Visits)
x1
plot(density(x1))
#pois==============================
x1=as.numeric(c(data1$Unique.Visits))
#pois==============================
x1=as.numeric(data1$Unique.Visits)
#Step 1: data pre-processing----------------------------------------------------
#visitors
data1<-read.csv("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2/data/visitors_rawdata.csv")
#samplesize=60
a<-nrow(data1)
#pois==============================
x1=as.numeric(gsub(",", "", data1$Unique.Visits))
x1
plot(density(x1))
#Step 1: data pre-processing----------------------------------------------------
#visitors
data1<-read.csv("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2/data/visitors_rawdata.csv")
samplesize=60
a<-nrow(data1)
b<-a1-(samplesize-1)
x1<-data1[b:a,]
c1<-as.numeric(gsub(",", "", x1$Unique.Visits))
#Step 1: data pre-processing----------------------------------------------------
#visitors
data1<-read.csv("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2/data/visitors_rawdata.csv")
samplesize=60
a<-nrow(data1)
b<-a1-(samplesize-1)
b<-a-(samplesize-1)
x1<-data1[b:a,]
c1<-as.numeric(gsub(",", "", x1$Unique.Visits))
plot(density(c1))
x1<-as.numeric(gsub(",", "", x1$Unique.Visits))
plot(density(x1))
gaus_mean_x1=mean(x1)
gaus_sd_last_x1=sqrt(var(x1))
len_table=length(2:4)+1
aic_bic_x1=array(NA,dim = c(2,len_table),dimnames = list(c('aic','bic'),c(paste0('m=',2:4),"selected m")))
for (m in 2:4){
#m=3
initP_last=rep(1/m,m)
transP_last=matrix(1/m,m,m)
gaus_mean_last=rep(gaus_mean_x1,m)
gaus_sd_last=rep(gaus_sd_last_x1,m)
list_mstep_para_gaus=EM_gaus(T=length(x1),m,x1,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
aic_x1_m=list_mstep_para_gaus$aic
bic_x1_m=list_mstep_para_gaus$bic
aic_bic_x1[1,m-1]=aic_x1_m
aic_bic_x1[2,m-1]=bic_x1_m
}
aic_bic_x1[1,len_table]=as.numeric(which.min(aic_bic_x1[1,])+1)
aic_bic_x1[2,len_table]=as.numeric(which.min(aic_bic_x1[2,])+1)
print(aic_bic_x1)
m=2
initP_last=rep(1/m,m)
transP_last=matrix(1/m,m,m)
gaus_mean_last=rep(gaus_mean_x1,m)
gaus_sd_last=rep(gaus_sd_last_x1,m)
list_mstep_para_gaus=EM_gaus(T=length(x1),m,x1,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
list_mstep_para_gaus
m=2
initP_last=rep(1/m,m)
transP_last=matrix(1/m,m,m)
lambda_last=rep(2000,m)
list_mstep_para_pois=EM_pois(T=length(x1),m,x1,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
list_mstep_para_pois
lambda_last=rep(20,m)
list_mstep_para_pois=EM_pois(T=length(x1),m,x1,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
list_mstep_para_pois
lambda_last=rep(200,m)
list_mstep_para_pois=EM_pois(T=length(x1),m,x1,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
list_mstep_para_pois
lambda_last=rep(1000,m)
list_mstep_para_pois=EM_pois(T=length(x1),m,x1,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
list_mstep_para_pois
lambda_last=rep(3000,m)
list_mstep_para_pois=EM_pois(T=length(x1),m,x1,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
list_mstep_para_pois
list_mstep_para_pois=EM_pois(T=length(x1),m,x1,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-6))
list_mstep_para_pois
transP_last=matrix(c(0.1,0.9,0.8,0.2),2,2)
lambda_last=rep(3000,m)
list_mstep_para_pois=EM_pois(T=length(x1),m,x1,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-6))
list_mstep_para_pois#Step 3: Parameter Estimation---------------------------------------------------
list_mstep_para_pois=EM_pois(T=length(x1),m,x1,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-30))
list_mstep_para_pois
lambda_est_x1=list_mstep_para_pois$lambda
transP_est_x1=list_mstep_para_pois$transP
initP_est_x1=list_mstep_para_pois$initP
lambda_est_x1=list_mstep_para_pois$lambda
transP_est_x1=list_mstep_para_pois$transP
initP_est_x1=list_mstep_para_pois$initP
path=viterbi_pois(initP_est_x1,transP_est_x1,lambda_est_x1,m,T=length(x1),x1)
path
#lambda_x1=lambda_est_x1[order(gaus_mean_est_x2)]
path[path==1]=lambda_est_x1[1]
path[path==2]=lambda_est_x1[2]
#path[path==3]=gaus_mean[3]
#path[path==4]=gaus_mean[4]
path
plot(x1,type = "l")
par(new=TRUE)
plot(path,type = "l",col="red")
data3<-read.csv("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2/data/accident.csv")
samplesize=60
data3
x3=data3$x
x3
plot(density(x3))
m=2
initP_last=rep(1/m,m)
transP_last=matrix(c(0.1,0.9,0.8,0.2),2,2)
lambda_last=rep(300,m)
list_mstep_para_pois=EM_pois(T=length(x3),m,x3,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-30))
list_mstep_para_pois
lambda_est_x3=list_mstep_para_pois$lambda
transP_est_x3=list_mstep_para_pois$transP
initP_est_x3=list_mstep_para_pois$initP
path=viterbi_pois(initP_est_x3,transP_est_x3,lambda_est_x3,m,T=length(x1),x1)
path=viterbi_pois(initP_est_x3,transP_est_x3,lambda_est_x3,m,T=length(x3),x3)
path
#lambda_x1=lambda_est_x1[order(gaus_mean_est_x2)]
path[path==1]=lambda_est_x3[1]
path[path==2]=lambda_est_x3[2]
#path[path==3]=gaus_mean[3]
#path[path==4]=gaus_mean[4]
path
plot(x3,type = "l")
par(new=TRUE)
plot(path,type = "l",col="red")
data3<-read.csv("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2/data/accident.csv")
samplesize=60
x3=data3$x
mean_x3=mean(x3)
len_table=length(2:4)+1
aic_bic_x3=array(NA,dim = c(2,len_table),dimnames = list(c('aic','bic'),c(paste0('m=',2:4),"selected m")))
for (m in 2:4){
#m=3
initP_last=rep(1/m,m)
transP_last=matrix(1/m,m,m)
lambda_x3=rep(mean_x3,m)
list_mstep_para_pois=EM_pois(T=length(x3),m,x3,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-30))
aic_x3_m=list_mstep_para_pois$aic
bic_x3_m=list_mstep_para_pois$bic
aic_bic_x3[1,m-1]=aic_x1_m
aic_bic_x3[2,m-1]=bic_x1_m
}
aic_bic_x3[1,len_table]=as.numeric(which.min(aic_bic_x3[1,])+1)
aic_bic_x3[2,len_table]=as.numeric(which.min(aic_bic_x3[2,])+1)
print(aic_bic_x3)
m=2
initP_last=rep(1/m,m)
transP_last=matrix(1/m,m,m)
lambda_x3=rep(mean_x3,m)
list_mstep_para_pois=EM_pois(T=length(x3),m,x3,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-30))
list_mstep_para_pois
transP_last
transP_last=matrix(c(0.1,0.9,0.8,0.2),2,2)
transP_last
transP_last=matrix(c(0.1,0.9,0.8,0.2),2,2,byrow = TRUE)
transP_last
m=2
list_mstep_para_pois=EM_pois(T=length(x3),m,x3,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-30))
lambda_est_x3=list_mstep_para_pois$lambda
transP_est_x3=list_mstep_para_pois$transP
initP_est_x3=list_mstep_para_pois$initP
path=viterbi_pois(initP_est_x3,transP_est_x3,lambda_est_x3,m,T=length(x3),x3)
path
#lambda_x1=lambda_est_x1[order(gaus_mean_est_x2)]
path[path==1]=lambda_est_x3[1]
path[path==2]=lambda_est_x3[2]
#path[path==3]=gaus_mean[3]
#path[path==4]=gaus_mean[4]
path
plot(x3,type = "l")
par(new=TRUE)
plot(path,type = "l",col="red")
list_mstep_para_pois
transP_last=matrix(c(0.1,0.7,0.2,0.8,0.1,0.1,0.1,0.6,0.3),2,2,byrow = TRUE)
transP_last=matrix(c(0.1,0.7,0.2,0.8,0.1,0.1,0.1,0.6,0.3),3,3,byrow = TRUE)
transP_last=matrix(c(0.1,0.9,0.8,0.2),2,2,byrow = TRUE)
transP_last=matrix(c(0.1,0.7,0.2,0.8,0.1,0.1,0.1,0.6,0.3),3,3,byrow = TRUE)
transP_last
m=3
initP_last=rep(1/m,m)
lambda_last=rep(300,m)
list_mstep_para_pois=EM_pois(T=length(x3),m,x3,lambda_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-30))
lambda_est_x3=list_mstep_para_pois$lambda
transP_est_x3=list_mstep_para_pois$transP
initP_est_x3=list_mstep_para_pois$initP
path=viterbi_pois(initP_est_x3,transP_est_x3,lambda_est_x3,m,T=length(x3),x3)
path
#lambda_x1=lambda_est_x1[order(gaus_mean_est_x2)]
path[path==1]=lambda_est_x3[1]
path[path==2]=lambda_est_x3[2]
path[path==3]=lambda_est_x3[3]
#path[path==4]=gaus_mean[4]
path
plot(x3,type = "l")
par(new=TRUE)
plot(path,type = "l",col="red")
data4=read.csv("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2/data/energy_first_60.csv")
daat4
data4
x=data4$x
plot(density(x))
m=3
initP_last=rep(1/m,m)
transP_last=matrix(c(0.8,0.1,0.1,0.1,0.2,0.7,0.6,0.2,0.2),3,3,byrow = TRUE)
gaus_mean_last=rep(gaus_mean_x4,m)
#energy=======================
data4=read.csv("/Users/jiangyunhui/Documents/GitHub/STAT4011-Project-2/data/energy_first_60.csv")
x4=data4$x
plot(density(x4))
x4=c(data2$ProductP4)
gaus_mean_x4=mean(x4)
gaus_sd_last_x4=sqrt(var(x4))
len_table=length(2:4)+1
aic_bic_x4=array(NA,dim = c(2,len_table),dimnames = list(c('aic','bic'),c(paste0('m=',2:4),"selected m")))
m=3
initP_last=rep(1/m,m)
transP_last=matrix(c(0.8,0.1,0.1,0.1,0.2,0.7,0.6,0.2,0.2),3,3,byrow = TRUE)
gaus_mean_last=rep(gaus_mean_x4,m)
gaus_sd_last=rep(gaus_sd_last_x4,m)
list_mstep_para_gaus=EM_gaus(T=length(x4),m,x4,gaus_mean_last,gaus_sd_last,
transP_last,initP_last,
num_ite=10^4,tol=10^(-3))
list_mstep_para_gaus
initP_est_x4=list_mstep_para_gaus$initP
transP_est_x4=list_mstep_para_gaus$transP
gaus_mean_est_x4=list_mstep_para_gaus$gaus_mean
gaus_var_est_x4=list_mstep_para_gaus$gaus_var
path=viterbi_gaus(initP_est_x4,transP_est_x4,gaus_mean_est_x4,gaus_var_est_x4,m,T=length(x4),x4)
path
gaus_mean=gaus_mean_est_x2[order(gaus_mean_est_x2)]
path[path==1]=gaus_mean[1]
path[path==2]=gaus_mean[2]
list_mstep_para_gaus
initP_est_x4=list_mstep_para_gaus$initP
transP_est_x4=list_mstep_para_gaus$transP
gaus_mean_est_x4=list_mstep_para_gaus$gaus_mean
gaus_var_est_x4=list_mstep_para_gaus$gaus_var
path=viterbi_gaus(initP_est_x4,transP_est_x4,gaus_mean_est_x4,gaus_var_est_x4,m,T=length(x4),x4)
path
#gaus_mean=gaus_mean_est_x2[order(gaus_mean_est_x2)]
path[path==1]=gaus_mean[1]
path[path==2]=gaus_mean[2]
path[path==3]=gaus_mean[3]
#path[path==4]=gaus_mean[4]
path
plot(x2,type = "l")
par(new=TRUE)
plot(path,type = "l",col="red")
list_mstep_para_gaus
path=viterbi_gaus(initP_est_x4,transP_est_x4,gaus_mean_est_x4,gaus_var_est_x4,m,T=length(x4),x4)
path
#gaus_mean=gaus_mean_est_x2[order(gaus_mean_est_x2)]
path[path==1]=gaus_var_est_x4[1]
path[path==2]=gaus_var_est_x4[2]
path[path==3]=gaus_var_est_x4[3]
#path[path==4]=gaus_mean[4]
path
plot(x2,type = "l")
par(new=TRUE)
plot(path,type = "l",col="red")
<<<<<<< Updated upstream
>>>>>>> Stashed changes
=======
>>>>>>> Stashed changes
